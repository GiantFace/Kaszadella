"use server";

import { db } from "@/database/drizzle";
import { users, forgotPasswordTokens } from "@/database/schema";
import { eq } from "drizzle-orm";
import { hash } from "bcryptjs";
import { signIn } from "@/auth";
import { headers } from "next/headers";
import ratelimit from "@/lib/ratelimit";
import { redirect } from "next/navigation";
import { sendMail } from "@/lib/sendMail";
import { randomUUID } from "crypto";
import { date, timestamp } from "drizzle-orm/pg-core";

export const signInWithCredentials = async (
  params: Pick<AuthCredentials, "email" | "password">,
) => {
  const { email, password } = params;
  const ip = (await headers()).get("x-forwarded-for") || "127.0.0.1";
  const { success } = await ratelimit.limit(ip);

  if (!success) return redirect("/too-fast");

  try {
    const result = await signIn("credentials", {
      email,
      password,
      redirect: false,
    });
    if (result?.error) {
      return { success: false, error: result.error };
    }
    return { success: true };
  } catch (error) {
    return {
      success: false,
      error: "Nem megfelel≈ë felhaszn√°l√≥n√©v vagy jelsz√≥",
    };
  }
};

export const signUp = async (params: AuthCredentials) => {
  const { fullName, email, password, nickname } = params;
  const ip = (await headers()).get("x-forwarded-for") || "127.0.0.1";
  const { success } = await ratelimit.limit(ip);
  const expiration = new Date();
  expiration.setHours(expiration.getHours() + 48);

  if (!success) return redirect("/too-fast");
  const existingUser = await db
    .select()
    .from(users)
    .where(eq(users.email, email))
    .limit(1);
  if (existingUser.length > 0) {
    return { success: false, error: "A felhaszn√°l√≥ m√°r regisztr√°lt" };
  }

  const hashedPassword = await hash(password, 10);
  const verificationToken = randomUUID();

  try {
    await db.insert(users).values({
      email,
      password: hashedPassword,
      fullName,
      package: "Default",
    });

    await db.insert(forgotPasswordTokens).values({
      email,
      token: verificationToken,
      expiresAt: expiration,
      createdAt: new Date(),
    });

    // üî• Itt k√ºldj√ºk el az emailt a sikeres regisztr√°ci√≥ ut√°n
    const verifyUrl = `${process.env.NEXT_PUBLIC_BASE_URL}/verify-email?token=${verificationToken}&email=${encodeURIComponent(email)}`;

    await sendMail(
      email,
      "√údv Kaszadella vil√°g√°ban!",
      `
  <div style="font-family: Arial, sans-serif; color: #111; line-height: 1.6;">
    <h2 style="color:#0EA5C4;">√údv√∂zl√ºnk a Kaszadella vil√°g√°ban!</h2>
    <h2>K√©rj√ºk, er≈ës√≠tsd meg az email c√≠med!</h2>
  <p>Kattints az al√°bbi linkre, hogy aktiv√°ld a fi√≥kodat:</p>
  <a href="${verifyUrl}" style="padding: 10px 15px; background: #0EA5C4; color: white; text-decoration: none;">Email meger≈ës√≠t√©se</a>
  <p>Ha nem te regisztr√°lt√°l, k√©rj√ºk hagyd figyelmen k√≠v√ºl ezt az √ºzenetet.</p>
  \`,
    <p>
      Ahol az √°lmok tal√°lkoznak a val√≥s√°ggal, √©s a kasz√°d nem a f≈±re, hanem a nyerem√©nyekre s√∫jt le!<br/>
      √ñr√∂m l√°tni, hogy te is csatlakozt√°l a <strong>Kaszadella</strong> k√∂z√∂ss√©ghez ‚Äì a <em>bajnokok brig√°dj√°hoz</em>, ahol nap mint nap egy√ºtt haladunk a siker fel√©.
    </p>
    
    <p>
      <strong>Mit kaphatsz mostant√≥l?</strong><br/>
      ‚úÖ Dupl√°z√≥ tippek, hogy stabilan √©p√≠tsd az alapokat<br/>
      ‚úÖ K√∂zepes √©s nagy oddsok, hogy meg√©ld az izgalmakat<br/>
      ‚úÖ H√©tv√©gi extra mixek, hogy igaz√°n nagyot kasz√°lj<br/>
    </p>

    <p style="margin-top:20px;">
      Kaszadella t√∂rt√©nete most veled folytat√≥dik! Fogd meg a kasz√°t, vedd kezedbe a sorsod ‚Äì √©s indulhat az arat√°s!<br/>
      <strong>‚ÄúC√©lozd meg a holdat, √©s a csillagok k√∂z√© esel!‚Äù</strong>
    </p>

    <hr style="margin: 30px 0;" />

    <p style="font-size: 14px; color: #555;">
      Ha b√°rmilyen k√©rd√©sed van, √≠rj nek√ºnk b√°tran: <a href="mailto:info@kaszadella.com">info@kaszadella.com</a><br/>
      √údv√∂zlettel,<br/>
      A Kaszadella csapata üåæ
    </p>
  </div>
  `,
    );

    //await signInCredentials({ email, password });
    return { success: true };
  } catch (error) {
    return { success: false, error: "Regisztr√°ci√≥s hiba" };
  }
};
